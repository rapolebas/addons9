-
  set invoice context needed for refunds
-
  !context
    model: 'account.invoice'
-
  Create draft refund for invoice 3
-
  !record {model: account.invoice.refund, id: demo_refund_invoice_3}:
    description: 'Mercader√≠a defectuosa'
    invoice_id: demo_invoice_3
    filter_refund: 'refund'
-
  !python {model: account.invoice.refund} : |
    context = {'active_ids': [ref('demo_invoice_3')], 'active_model': 'account.invoice'}
    refund_ids = [ref("demo_refund_invoice_3")]
    self.get_available_journal_document_types(cr, uid, refund_ids, context)
    self.invoice_refund(cr, uid, refund_ids, context)
-
  Create cancel refund for invoice 4
-
  !record {model: account.invoice.refund, id: demo_refund_invoice_4}:
    description: 'Venta cancelada'
    invoice_id: demo_invoice_4
    filter_refund: 'cancel'
-
  !python {model: account.invoice.refund} : |
    context = {'active_ids': [ref('demo_invoice_4')], 'active_model': 'account.invoice'}
    refund_ids = [ref("demo_refund_invoice_4")]
    self.get_available_journal_document_types(cr, uid, refund_ids, context)
    self.invoice_refund(cr, uid, refund_ids, context)
-
  Create cancel refund for expo invoice 16 (las nc/nd expo invoice no requiere parametro permiso existennte, por eso agregamos este ejemplo)
-
  !record {model: account.invoice.refund, id: demo_refund_invoice_16}:
    description: 'Venta cancelada'
    invoice_id: demo_invoice_16
    filter_refund: 'cancel'
-
  !python {model: account.invoice.refund} : |
    context = {'active_ids': [ref('demo_invoice_16')], 'active_model': 'account.invoice'}
    refund_ids = [ref("demo_refund_invoice_4")]
    self.get_available_journal_document_types(cr, uid, refund_ids, context)
    self.invoice_refund(cr, uid, refund_ids, context)
